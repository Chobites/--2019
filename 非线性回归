import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

#生成200个随机点
x_data = np.linspace(-0.5,0.5,200)[:,np.newaxis]##
print(x_data)
noise = np.random.normal(0,0.02,x_data.shape)  ###
y_data = np.square(x_data) + noise

plt.scatter(x_data,y_data)
#plt.show() #

#
x = tf.placeholder(tf.float32,[None,1])
y = tf.placeholder(tf.float32,[None,1])

#1-20-1
w1 = tf.Variable(tf.random_normal([1,20]))#1行20列
b1 = tf.Variable(tf.zeros([20]))
wx_plus_b = tf.matmul(x,w1) + b1
#x这里不确定 是个占位符
#加上一个双曲正切激活函数

l1 = tf.nn.tanh(wx_plus_b)
w2 = tf.Variable(tf.random_normal([20,1]))
b2 = tf.Variable(tf.zeros([1]))
wx_plus_b_2 = tf.matmul(tf.nn.tanh(tf.matmul(x,w1) + b1 ),w2) + b2
prediction = tf.nn.tanh(wx_plus_b_2)
#代价函数
loss = tf.losses.mean_squared_error(y,prediction)
#梯度下降最小化这个LOSS
train  = tf.train.GradientDescentOptimizer(0.1).minimize(loss)

#
with tf.Session() as sess:
    #初始化
    sess.run(tf.global_variables_initializer())
    for _ in range(3000):
        sess.run(train,feed_dict={x:x_data,y:y_data})

    #模型训练好了
    prediction_value = sess.run(prediction,feed_dict={x:x_data})

    plt.scatter(x_data,y_data)

    plt.plot(x_data,prediction_value,'r-',lw=5)
    plt.show()
    
